{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"aPlot. Try to make Matplotlib great again.","text":"<p><code>aPlot</code> - is a wrapper around Matplotlib that reduces the code required for plotting.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>APlot is a wrapper around Matplotlib that reduces the code required for plotting. It makes the code shorter and more pleasant, while still maintaining generality.</p> <p>Currently plotting with matplotlib is a nightmare. Normally there are so many line to plot a simple plot. Take as an example your code for plotting on grid 2x2 and count how make duplication information you have. So this library is a way how to write less to have the same plots. It\u2019s a wrapper around Matplotlib and therefore you still have all function from it, so don\u2019t worry to not have some functionality. But the main changes are the following:</p> <ul> <li>Every plot or set method on axes return the axes itself. Which allows your to stack command and</li> <li>You can create the list of the axes and do manipulations on a list. Like setting labels or plotting some data, which reduce by a lot the repeating information.</li> <li>As usual it\u2019s typed as well as original matplotlib, there for you have hints to allow you very smooth manipulation.</li> </ul> <p>Here's a simple example demonstrating how this package can significantly reduce the number of lines in your code. In this example, it went from 13 to 5 lines, remained perfectly readable and potentially prettier.</p> <p>Matplotlib code:</p> <pre><code>import matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(2, 2)\nx = np.linspace(0, 2 * np.pi, 100)\nz = np.sin(x) + 1j * np.cos(x)\n\naxes[0][0].plot(x, np.real(z))\naxes[0][0].set_ylabel(\"Real\")\naxes[1][0].plot(x, np.imag(z))\naxes[1][0].set_ylabel(\"Imag\")\naxes[0][1].plot(x, np.abs(z))\naxes[0][1].set_ylabel(\"Amp\")\naxes[1][1].plot(x, np.unwrap(np.angle(z)))\naxes[1][1].set_ylabel(\"Phase\")\nfor axes_row in axes:\n    for ax in axes_row:\n        ax.set(xlabel=\"Time (s)\")\nfig.suptitle(\"Complex Signal\")\nfig.tight_layout()\n</code></pre> <p>APlot compact code</p> <pre><code>import aplot as ap\nx = np.linspace(0, 2 * np.pi, 100)\nz = np.sin(x) + 1j * np.cos(x)\n\naxes = (\n    ap.axs(2, 2)\n    .plot(x, [[np.real(z), np.abs(z)], [np.imag(z), np.unwrap(np.angle(z))]])\n    .suptitle(\"Complex Signal\")\n    .set(xlabel=\"Time (s)\", ylabel=[[\"Real\", \"Abs\"], [\"Imag\", \"Phase\"]])\n    .tight_layout()\n)\n</code></pre> <p>You can also access the axes as usual.</p> <pre><code>axes = (\n    ap.axs(2, 2)\n    .suptitle(\"Complex Signal\")\n    .set(xlabel=\"Time (s)\", ylabel=[[\"Real\", \"Abs\"], [\"Imag\", \"Phase\"]])\n    .tight_layout()\n)\naxes[0].plot(x, [np.real(z), np.abs(z)])\naxes[1][0].plot(x, np.imag(z))\naxes[1][1].plot(x, np.unwrap(np.angle(z)))\n</code></pre> <p>You can use <code>autoaxis</code> method to let is name the axis for your draft plots</p> <pre><code>axes = (\n    ap.axs(2, 2)\n    .plot(x, [[np.real(z), np.abs(z)], [np.imag(z), np.unwrap(np.angle(z))]])\n    .suptitle(\"Complex Signal\")\n    .autoaxis()\n    .tight_layout()\n)\n</code></pre>"},{"location":"#install","title":"Install","text":"<p><code>pip install aplot</code></p> <p>For more installation details, please refer to the How to install</p>"},{"location":"#how-to-use","title":"How to use","text":"<p>For further insight, please refer to the First Steps guide</p>"},{"location":"about/","title":"About <code>aPlot</code>","text":""},{"location":"develop/","title":"Developer guidelines","text":""},{"location":"releases/","title":"Index","text":"<p>Current edition is in beta version.</p>"},{"location":"starting_guide/first_steps/","title":"Getting Started with <code>aPlot</code>","text":"<p>Make sure you have installed the package before.</p>"},{"location":"starting_guide/install/","title":"Installation <code>aPlot</code>","text":"<p>You can install the <code>aplot</code> library using either pip or by pulling the repository directly from GitHub.</p>"},{"location":"starting_guide/install/#option-1-install-via-pip","title":"Option 1: Install via Pip","text":"<p>Open your terminal and run the following command</p> <pre><code>pip install aplot\n</code></pre>"},{"location":"starting_guide/install/#option-2-install-from-github","title":"Option 2: Install from GitHub","text":"<p>You can also install <code>aplot</code> directly from its GitHub repository. This option is useful if you want to work with the latest development version or if you need to customize the library. Here's how to do it:</p> <ol> <li>Clone the <code>aplot</code> repository from GitHub using the following command:</li> </ol> <pre><code>git clone https://github.com/kyrylo-gr/aplot.git\n</code></pre> <ol> <li>Enter the directory and install the package.</li> </ol> <pre><code>cd aplot\npip install -e .\n</code></pre> <p><code>-e</code> allows you to link the library to the directory that you created, therefore allows you to change the code inside this directory. Instead <code>pip install -e .</code> you can run <code>python setup.py develop</code> if you prefer.</p>"},{"location":"starting_guide/install/#thats-it","title":"That's it!","text":"<p>You've successfully installed the <code>aplot</code> library. You can now start incorporating <code>aplot</code> into your Python projects.</p> <p>For further insight, please refer to the First Steps guide.</p>"}]}